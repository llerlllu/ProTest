import React from "react";

function Seventh() {
  return (
    <div className="item">
      <div className="item__text">
        Понятие “тест-анализ” возникло с появлением теории тестирования и
        происходит от системного анализа. Тест-анализ направлен на уменьшение
        неопределенности в тестировании.
      </div>
      <div className="item__text">
        Тест-анализ состоит в определении точных метрик, целей и критериев
        тестирования – KPI , - что служит основой для тест-дизайна.
        Тест-аналитик определяет, ЧТО тестировать.
      </div>
      <div className="item__text">
        Тест-дизайн – разработка тест-кейсов и тестовых условий, при
        использовании техник тестирования, определенных в стратегии или плане
        тестирования. Тест-дизайнер определяет КАК тестировать.
      </div>

      <div className="item__title">Техники белого ящика:</div>
      <div className="item__text">Известны следующие основные</div>
      <div className="item__subtext">
        ● покрытие решений - эта техника состоит в том, что записывается такое
        число тестов, чтобы каждое условие в программе принимало по одному разу
        истинное и по одному разу ложное значение;
      </div>
      <div className="item__subtext">
        ● покрытие условий - Эта техника состоит в проведении такого числа
        тестов, чтобы все возможные результаты каждого условия в решении
        выполнялись хотя бы один раз;
      </div>
      <div className="item__subtext">
        ● комбинаторное покрытие условий - Принцип этой техники в том, чтобы все
        возможные комбинации результатов условий в каждом решении, а также
        каждый оператор выполнялись хотя бы один раз;
      </div>
      <div className="item__subtext">
        ● покрытие операторов - эта техника подразумевает проверку, что каждый
        оператор в программе проверяется хотя бы один раз.
      </div>

      <div className="item__title">Техники чёрного ящика</div>
      <div className="item__text">
        Для тестирования чёрного ящика известны следующие техники:
      </div>
      <div className="item__subtext">● доменное тестирование;</div>
      <div className="item__subtext">● таблицы принятия решений;</div>
      <div className="item__subtext">● тестирование состояний и переходов;</div>
      <div className="item__subtext">● предугадывание ошибки.</div>

      <div className="item__title">Домены</div>
      <div className="item__text">
        Доменный анализ​ - техника тест-дизайна, в основе которой лежит работа с
        доменами. В свою очередь, ​домен ​– некая совокупность элементов,
        которая имеет свои границы (за пределами которых свойства элементов
        отличаются от свойств элементов в границах).
      </div>
      <div className="item__text">Пример:</div>
      <div className="item__text">
        Говорят, что в каком-то самолете был баг - при пересечении экватора
        система управления переворачивала самолет вверх шасси.
      </div>
      <div className="item__text">Получаем 4 домена:</div>
      <div className="item__subtext">● полет в северном полушарии,</div>
      <div className="item__subtext">● полет в южном полушарии,</div>
      <div className="item__subtext">
        ● перелет из северного в южное полушарие;
      </div>
      <div className="item__subtext">
        ● перелет из южного в северное полушарие.
      </div>

      <div className="item__title">Стратегии тестирования домена</div>
      <div className="item__text">
        1. Random Testing – выбор значений для тестирования класса случайным
        образом из области допустимых значений класса.
      </div>
      <div className="item__text">
        2. Метод пропорционального разбиения – по сути, продолжение метода
        случайного тестирования, с той лишь разницей, что количество тестовых
        значений для классов определяется:
      </div>
      <div className="item__subtext">
        ● стоимостью дефекта в классе (насколько опасно иметь дефект в том или
        ином классе). Таким образом, чем сложнее система или её функция – тем
        большее количество тестов по её проверке необходимо.
      </div>
      <div className="item__subtext">
        ● классы разбиваются на подклассы, и из каждого подкласса выбирается по
        одному значению.
      </div>
      <div className="item__subtext">
        ● величиной класса (чем больше область допустимых значений класса, тем
        больше тестовых значений потребуется для тестирования).
      </div>
      <div className="item__text">
        3. Risk-based – группа техник тестирования, фокусирующаяся на выборе
        значений в потенциально уязвимых местах.
      </div>
      <div className="item__text">
        4. Анализ граничных значений (Boundary Value Testing) - популярная
        техника доменного анализа, при которой исследуются границы классов
        эквивалентности и проверяются элементы, близкие к границе.
      </div>
      <div className="item__text">
        Данная техника основана на рисках и начинается с идеи о том, что
        программа может сломаться в области граничных значений, поскольку:
      </div>
      <div className="item__subtext">
        ● давно замечено, что при разработке большое число проблем возникает на
        границах входных переменных;
      </div>
      <div className="item__subtext">
        ● даже если эквивалентные классы найдены правильно, то граничные
        значения могут быть ошибочно отнесены к другому классу.
      </div>
      <div className="item__text">
        Примерный алгоритм использования техники анализа граничных значений:
      </div>
      <div className="item__subtext">● Выделить классы эквивалентности.</div>
      <div className="item__subtext">
        ● Определить граничные значения этих классов.
      </div>
      <div className="item__subtext">
        ● Понять, к какому классу будет относиться каждая граница.
      </div>
      <div className="item__subtext">
        ● Для каждой границы выполнить тесты по проверке значения до границы, на
        границе и сразу после границы.
      </div>
      <div className="item__text">
        5. Специальные значения для тестирования – выбор дополнительных
        значений, исходя из специфики предметной области.
      </div>
      <div className="item__text">
        6. Sleeplechase Testing – ещё одна разновидность работы с граничными
        значениями; кроме границ, накладываемых бизнес-требованиями, нужно
        проверять технические границы.
      </div>
      <div className="item__text">
        7. Анализ границ выходных значений (Robustness Testing) - техника, при
        которой исследуются выходные значения, на основании чего выбираются
        входные значения для тестов.
      </div>

      <div className="item__title">Домашнее задание</div>
      <div className="item__text">
        1. Составить тесты для проверки функции, основываясь на техниках
        тестирования белого ящика. Функция:
      </div>
      <div className="item__text">{`void​ func​(​int​ a​,​ ​int​ b,​​ ​float​ x​) ​​{`}</div>
      <div className="item__text">{`if​ ​((​a ​<​9​)​ ​&&​ ​(​b ​=​ ​5​))​ x =​​ x*​​a+​b​​;`}</div>
      <div className="item__text">{`if​ ​(​a ​>​ ​2​ ​||​ x ​>​ ​6​)​ x+​+;`}</div>
      <div className="item__text">{`}`}</div>
    </div>
  );
}

export default Seventh;
