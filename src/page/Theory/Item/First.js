import React from "react";

import "../style.scss";

function First() {
  return (
    <div className="item">
      <div className="item__title">Что представляет собой тестирование?</div>
      <div className="item__text">
        В более широком смысле, тестирование - это одна из техник контроля
        качества, включающая в себя активности по планированию работ,
        проектированию тестов, выполнению тестирования и анализу полученных
        результатов. Помимо технических навыков ему очень важно обладать такими
        качествами, как внимательность и пытливый ум, быть активным и уметь
        донести мысль и отстоять свою точку зрения на любом уровне. В каком-то
        роде, тестировщики — это исследователи из мира разработки ПО. Поэтому в
        руках инженера-тестировщика легко узнаваемый символ — лупа (линза),
        наблюдающая за жучками. Как нельзя лучше характеризует она работу
        тестировщика: используется как по прямому назначению для выявления
        дефектов, так и для «прожигания дырочек», с её помощью можно добывать
        огонь и даже, имея целую систему линз, наблюдать за звёздами. Главное —
        уметь это делать.
      </div>

      <div className="item__title">Цель тестировщика</div>
      <div className="item__text">
        Цель тестировщика - найти как можно больше ошибок, и чем серьезнее
        найденные проблемы, тем лучше. В конечном счете, большинство ошибок
        исправляют, и качество программы улучшается. Для работы тестировщика
        очень важно то, как он настроен. Если вы уверены, что в программе есть
        ошибки, вы будете искать их гораздо тщательнее, чем если скажете себе:
        "Это прекрасная программа, и она правильно работает, мне нужно просто в
        этом убедиться". Любой̆ психолог охотно подтвердит, что человек всегда
        видит только то, что хочет видеть. Поэтому, например, так трудно при
        чтении текста заметить в нем орфографические ошибки: ведь ум сразу
        корректирует увиденное глазами. Нужно считать программу плохой̆, желать,
        чтобы в ней̆ произошел сбой, и концентрироваться на поиске ее самых
        слабых мест.
      </div>

      <div className="item__title">Характеристики качества ПО</div>
      <div className="item__text">
        На данный момент наиболее распространена и используется Многоуровневая
        Модель Качества программного обеспечения (описывающая внутреннее и
        внешнее качество ПО), представленная в серии стандартов ISO 9126. На
        верхнем уровне выделено 6 основных характеристик качества ПО, каждую из
        которых определяют набором атрибутов, имеющих соответствующие метрики
        для последующей оценки. Согласно этой модели, Функциональность
        (Functionality) - определяется способностью ПО решать задачи, которые
        соответствуют зафиксированным и предполагаемым потребностям
        пользователя, при заданных условиях использования ПО. Т.е. эта
        характеристика отвечает за то, что ПО работает исправно и точно,
        функционально совместимо, соответствует стандартам отрасли и защищено от
        несанкционированного доступа. Надежность (Reliability) – способность ПО
        выполнять требуемые задачи в обозначенных условиях на протяжении
        заданного промежутка времени или указанное количество операций. Атрибуты
        данной характеристики – это завершенность и целостность всей системы,
        способность самостоятельно и корректно восстанавливаться после сбоев в
        работе, отказоустойчивость. Удобство использования (Usability) –
        возможность легкого понимания, изучения, использования и
        привлекательности ПО для пользователя.
      </div>
      <div className="item__text">
        Эффективность (Efficiency) – способность ПО обеспечивать требуемый
        уровень производительности в соответствие с выделенными ресурсами,
        временем и другими обозначенными условиями. Удобство сопровождения
        (Maintainability) – легкость, с которой ПО может анализироваться,
        тестироваться, изменяться для исправления дефектов, для реализации новых
        требований, для облегчения дальнейшего обслуживания и адаптироваться к
        именующемуся окружению. Портативность (Portability) – характеризует ПО с
        точки зрения легкости его переноса из одного окружения
        (software/hardware) в другое.
      </div>

      <div className="item__title">Метрики качества</div>
      <div className="item__text">
        Помимо перечисленных характеристик и атрибутов качества, стандарт ISO
        9126 определяет наборы метрик для оценки (получения численного значения)
        каждого атрибута:
      </div>
      <div className="item__text">
        • Полнота реализации функций — процент реализованных функций по
        отношению к перечисленным в требованиях. Используется для измерения
        функциональной пригодности.
      </div>
      <div className="item__text">
        • Корректность реализации функций — правильность их реализации по
        отношению к требованиям. Используется для измерения функциональной
        пригодности.
      </div>
      <div className="item__text">
        • Отношение числа обнаруженных дефектов к прогнозируемому. Используется
        для определения зрелости.
      </div>
      <div className="item__text">
        • Отношение числа проведенных тестов к общему их числу. Используется для
        определения зрелости.
      </div>
      <div className="item__text">
        • Отношение числа доступных проектных документов к указанному в их
        списке. Используется для измерения удобства проведения анализа.
      </div>
      <div className="item__text">
        • Наглядность и полнота документации. Используется для оценки
        понятности.
      </div>

      <div className="item__title">Ошибки пользовательского интерфейса</div>
      <div className="item__text">
        1. Функциональность (если предусмотренную программой̆ задачу трудно
        выполнить, если она решается неуклюже или при определенных
        обстоятельствах вообще не может быть решена).
      </div>
      <div className="item__subtext">
        a. В программе отсутствует описанная в спецификации или очевидно
        необходимая функция.
      </div>
      <div className="item__subtext">
        b. Функция программы должна выполнять одно (как правило в соответствии
        со спецификацией), а делает нечто другое.
      </div>
      <div className="item__text">
        2. Взаимодействие программы с пользователем (Насколько сложно
        пользователю разобраться в том, как работать с программой? Имеются ли
        экранные инструкции и подсказки? Понятны ли они? Имеется ли в программе
        интерактивная справка и насколько она полезна? Насколько корректно
        программа сообщает пользователю о его ошибках и объясняет, как их
        исправить? Нет ли в программе элементов, которые могут раздражать
        пользователя, сбивать его с толку или просто выглядеть неуклюже?).
      </div>
      <div className="item__subtext">a. Отсутствует название программы.</div>
      <div className="item__subtext">
        b. Отсутствует индикатор оставшегося времени обработки при длительном
        выполнении задания программой.
      </div>
      <div className="item__subtext">
        c. После выбора пользователем определенного режима или команды на экране
        нередко остается информация предыдущего режима, большая часть которой
        излишня или не относится к делу.
      </div>
      <div className="item__subtext">
        d. Синтаксическая ошибка (правописание).
      </div>
      <div className="item__subtext">
        e. Одна и та же функция не должна иметь в программе несколько значений:
        либо ОК, либо Сохранить - нужно выбрать что-то одно.
      </div>
      <div className="item__subtext">
        f. В сообщениях об ошибках не должно быть восклицательных знаков, слов
        “авария”, “сбой”, “нарушение”, “потеря данных”, шрифта красного цвета.
      </div>
      <div className="item__subtext">
        g. Сообщение об ошибке должно быть информативным: оно должно содержать
        причину ошибки и способ ее решения. Сообщения вроде ERROR 010
        недопустимы.
      </div>
      <div className="item__subtext">
        h. Не выделены активные элементы экрана.
      </div>
      <div className="item__text">
        3. Организация программы (Насколько легко потеряться в вашей программе?
        Нет ли в ней непонятных команд или таких, которые легко спутать между
        собой? Какие ошибки чаще всего делает пользователь, на что он тратит
        больше всего времени и почему?).
      </div>
      <div className="item__subtext">
        a. Неудачная организация меню: концептуально связанные команды должны
        быть объединены в одну группу. Такие группы должны четко отделяться друг
        от друга.
      </div>
      <div className="item__subtext">
        b. Диалоговые окна должны выводиться в одном и том же месте экрана, их
        текст должен отображаться одним шрифтом и одинаково выравниваться,
        заголовок окна должен отображать название открывшей его команды. Поля
        ввода и выбора должны быть выровнены.
      </div>
      <div className="item__subtext">
        c. Цвета, используемые в программе должны гармонично сочетаться. Их не
        должно быть много.
      </div>
      <div className="item__subtext">
        d. При возникновении ошибки в программе, ее поведение должно быть
        предсказуемым и последовательным. Программа не должна внезапно
        завершаться, перезапускаться, выдавать белый экран и т.д.
      </div>
      <div className="item__subtext">{`e. В меню не должно быть команд, которые невозможно выполнить. На экране будет написано "Для получения справки нажмите <F1>", а когда пользователь нажмет эту клавишу, программа скажет "К сожалению, справка по данной теме отсутствует".`}</div>
      <div className="item__subtext">
        f. Слишком много путей к одному и тому же месту. Если создается
        ощущение, что в программе можно, откуда угодно попасть куда угодно, ее
        внутренняя структура требует реорганизации. Так же ситуация чревата
        “тухлыми ссылками”, если тестируемая программа - веб сайт.
      </div>
      <div className="item__text">
        4. Пропущенные команды (Чего в программе не хватает? Не заставляет ли
        программа выполнять некоторые действия странным, неестественным или
        крайне неэффективным способом? Нельзя ли привести ее в соответствие с
        привычным стилем работы пользователя? Допускает ли она хотя бы некоторую
        степень настройки?).
      </div>
      <div className="item__subtext">
        a. У пользователя должна быть возможность отменить последнее выполненное
        действие.
      </div>
      <div className="item__subtext">
        b. У пользователя должна быть возможность прервать выполнение программой
        текущего задания и вернуться к исходному состоянию.{" "}
      </div>
      <div className="item__subtext">
        c. Если выполненная команда удаляет достаточно большое количество
        информации, отменяет значительный̆ объем выполненной̆ работы или
        производит иные разрушительные действия, программа обязательно должна
        запрашивать у пользователя подтверждение его намерений.{" "}
      </div>
      <div className="item__subtext">
        d. Средства защиты программы должны быть как можно менее навязчивыми.
        При работе за собственным компьютером, не подключенным к сети, программа
        не должна заставлять пользователя без конца вводить пароль.
      </div>
      <div className="item__subtext">
        e. Если пользователь допустил ошибку в середине длинной
        последовательности действий̆, некоторые программы заставляют его все
        повторить сначала.{" "}
      </div>
      <div className="item__text">
        5. Производительность (В интерактивном программном обеспечении очень
        важна скорость. У пользователя создается впечатление, что программа
        работа¬ет медленно, с задержками реакции?).
      </div>
      <div className="item__subtext">
        a. Низкая скорость работы программы. Программа может выполнять ненужную
        работу, напри¬мер, инициализировать области памяти, которые перед
        использованием обязательно будут перезаписаны.
      </div>
      <div className="item__subtext">
        b. Замедленное отображение вводимых пользователем данных. Замедленное
        перемещение курсора мыши, голосового ввода.
      </div>
      <div className="item__subtext">
        c. Программа, занятая другими приложениями не распознает ввод текста.
        Она должна запоминать вводимые данные и отображать их чуть позднее.
      </div>
      <div className="item__subtext">
        d. Излишние напоминания, предупреждения и вопросы, типа: “Бип! Ваш диск
        заполнен на 86%. Пожалуйста, поскорее его освободите”.{" "}
      </div>
      <div className="item__subtext">
        e. Справочная система, длинные меню, красивые картинки — должны
        мгновенно обрисовываться.
      </div>
      <div className="item__text">
        6. Выходные данные (Большинство программ, так или иначе, формируют
        выходные данные: отображают информацию на экране, печатают ее или
        сохраняют в файлах. Получаете ли вы то, что хотите? Правильно ли
        формируются отчеты, наглядны ли диаграммы и достаточно ли отчетливо они
        выглядят на бумаге? Сохраняются ли данные в формате, доступном и для
        других аналогичных программ? Обладает ли программа достаточной
        гибкостью, чтобы можно было подстраивать ее под нужды конкретного
        пользователя?).
      </div>

      <div className="item__title">Обработка ошибок</div>
      <div className="item__text">
        Процедуры обработки ошибок — это очень важная часть программы. В них
        тоже часто встречаются ошибки. Кроме того, правильно определив ошибку,
        программа не всегда выдает о ней достаточно информативное сообщение.
      </div>
      <div className="item__text">
        1. Если исполняемый код хранится в нескольких файлах, кто-то может
        попытаться использовать новую версию одних файлов со старой версией
        других.
      </div>
      <div className="item__text">
        2. Пользователь может ввести в программу неверные данные. “Защита от
        дурака”.
      </div>
      <div className="item__text">
        3. Переполнение. Если результат вычислений слишком велик, чтобы
        программа могла их обработать (при сложении очень больших чисел, делении
        на ноль, делении очень маленьких чисел).
      </div>
      <div className="item__text">
        4. Невозможные значения. Программа не должна принимать дату 31 февраля.
      </div>
      <div className="item__text">
        5. Пользователь может запросить программу снять со своего счета 10 млн
        долларов, но программа должна запросить разрешение на такую операцию у
        нескольких других пользователей.
      </div>
      <div className="item__text">
        6. В случае переполнения диска, программа должна уметь записать данные
        на другой носитель, а не потерять их. Если устройство долго не отвечает,
        то программа должна предположить, что оно отключено, а не ждать вечно.
      </div>
      <div className="item__title">
        Ошибки, связанные с обработкой граничных условий
      </div>
      <div className="item__text">
        Простейшими граничными условиями являются числовые. Но существует и
        много других граничных ситуаций. Любой̆ аспект работы программы, к
        которому применимы понятия больше или меньше, раньше или позже, первый
        или последний, короче или длиннее, обязательно должен быть проверен на
        границах диапазона. Внутри диапазонов программа обычно работает
        прекрасно, а вот на их границах порой случаются самые неожиданные
        отклонения.{" "}
      </div>
      <div className="item__text">
        1.Числовые ограничения. У треугольника ровно 3 стороны, сумма его углов
        равна 180 градусам. В одном байте могут храниться значения от 0 до 255.{" "}
      </div>
      <div className="item__text">
        2. Количественные ограничения. Если длина строки не должна превышать 80
        символов, то что будет, если пользователь введет 79, 80, 81 символ?
      </div>
      <div className="item__text">
        3. Пространственные ограничения. Если, например, программа рисует график
        в прямоугольнике определённого размера, что будет, если одну из точек
        графика нарисовать вне прямоугольника?{" "}
      </div>
      <div className="item__text">
        4. Ограничения времени. Предположим, что у пользователя есть 30 секунд
        для ответа на телефонный звонок. Через 30 секунд телефон перестает
        звонить, и вызов перенаправляется оператору. Что будет, если снять
        трубку на 30-й секунде?
      </div>
      <div className="item__text">
        5. Ограничения объема памяти. Существуют программы, которые не могут
        работать со слишком большим объемом памяти.
      </div>
      <div className="item__title">Ошибки вычислений </div>
      <div className="item__text">
        Даже самые простые арифметические операции всегда чреваты ошибками.
        Одними из самых распространенных среди математических ошибок являются
        ошибки округления. После нескольких промежуточных вычислений может
        оказаться, что 2 + 2 = -1, даже если на промежуточных этапах не было
        логических ошибок. К этой категории относятся и ошибки, вызванные
        неправильным выбо¬ром алгоритма. Сюда можно отнести неправильные
        формулы, формулы неприменимые к обрабатываемым данным, неверные способы
        разбиения сложных выражений на более простые элементы. В случае
        алгоритмической ошибки код в точности выполняет то, что имел в виду
        программист, — он правильно закодировал неверную идею.
      </div>
      <div className="item__text">1. Выполнение сложения вместо вычитания.</div>
      <div className="item__text">2. Выражения с обилием скобок.</div>
      <div className="item__text">
        3. Неправильный порядок операторов. Программа может выполнять вычисления
        не в том порядке, в каком ожидает программист. Например, если **
        означает возведение в степень, так что 5 ** 3 означает 5 в кубе, будет
        ли 2 * 5 ** 3 равно 1000 (10 в кубе) или 250 (5 в кубе умноженное на 2)?{" "}
      </div>
      <div className="item__text">
        4. Переполнение и потеря значащих разрядов. Как программе сохранить
        число 0,34674335, если для хранения дробной части выделен только один
        байт? В этом случае программы поступают по-разному — отсекают не
        поместившиеся цифры или преобразуют результат в 0.{" "}
      </div>
      <div className="item__text">
        5. Ошибки отсечения и округления. Если программа может хранить числа
        длиной не более двух цифр. В числе 5,19 три цифры. Если программа просто
        отсечет цифру 9, она сохранит 5,1. Вместо этого она может округлить
        число, и тогда будет сохранено 5,2, что гораздо ближе к исходному
        значению.{" "}
      </div>
      <div className="item__text">6. Неверная формула.</div>
      <div className="item__title">Начальное и последующие состояния </div>
      <div className="item__text">
        Бывает, что при выполнении какой-либо функции программы сбой происходит
        только однажды — при самом первом обращении к этой функции. На экране
        может появиться искаженное изображение или странная информация.
        Возможно, неверно выполнятся расчеты, запустятся бесконечные циклы или
        операционная система выдаст сообщение о нехватке памяти. Причиной такого
        поведения программы может быть отсутствие файла с инициализационной
        информацией. После первого же запуска программа создаст такой файл, и
        дальше все будет в порядке. Получается, что такую ошибку невозможно
        повторить (точнее, для ее повторения нужно установить новую копию
        программы). Но не стоит думать, что ошибка, проявляющаяся только при
        первом запуске программы, безвредна: ведь это будет первое, с чем
        столкнется каждый новый̆ пользователь. Иногда, программируя процесс,
        связанный с последовательными преобразованиями информации, разработчики
        забывают о том, что пользователю может понадобиться вернуться к исходным
        данным и изменить их. Насколько корректно поведет себя программа в такой
        ситуации? Позволит ли она внести нужные изменения и не будет ли из-за
        этого потеряна вся выполненная пользователем работа? Что увидит
        пользователь при возвращении к исходному состоянию программы: свои
        данные или стандартные значения, которыми программа инициализирует
        переменные при запуске?
      </div>
      <div className="item__title">Ошибки управления потоком</div>
      <div className="item__text">
        Если по логике программы вслед за первым действием должно быть выполнено
        второе, а она выполняет третье, значит, в управлении потоком допущена
        ошибка. Такие ошибки трудно пропустить: в худшем случае в работе
        программы произойдёт сбой, а при менее серьёзной ошибке она просто
        "забредет не туда".{" "}
      </div>
      <div className="item__text">
        1. “Зависание” компьютера. При этом единственный выход из состояния -
        перезапуск компьютера. Причиной могут быть бесконечные циклы,
        бесконечное ожидание ответа какого-либо устройства.
      </div>
      <div className="item__text">
        2. Завершение работы программы. Может происходить в случае возникновения
        ошибок определенных типов.
      </div>
      <div className="item__text">
        3. Неверно определены действия для всех остальных случаев. Предположим,
        что программист полагает, что переменная VAR может принимать только
        четыре значения. Он явно указывает три из них, а четвертое обрабатывает
        как "остальные". Но будут ли запрограммированные на этот случай действия
        правильными, если переменная примет пятое или шестое значение?{" "}
      </div>
      <div className="item__text">
        4. Установленные условия проверок не должны пересекаться.
      </div>
      <div className="item__text">{`5. Неверно заданные условия проверки. Программа выполняет Задание_16, только когда (VAR < 6) AND (VAR > 18). Это означает, что Задание_16 не выполняется никогда.`}</div>
      <div className="item__title">
        Ошибки передачи или интерпретации данных{" "}
      </div>
      <div className="item__text">
        Один модуль может передавать данные другому или даже другой программе.
        Некоторые данные могут передаваться между модулями множество раз, и на
        каком-то этапе они могут быть разрушены или неверно интерпретированы.
        Изменения, внесенные одной из частей программы, могут потеряться или
        достичь не всех частей системы, где они важны.
      </div>
      <div className="item__text">
        1. Неправильная интерпретация данных. Программа передает подпрограмме
        значение температуры по шкале Цельсия, а та интерпретирует его как
        температуру по Фаренгейта.
      </div>
      <div className="item__text">
        2. Неадекватная информация об ошибке. Столкнувшись с ошибкой, программа
        не установила ее флаг. Или же она выдала сигнал ошибки без сопутствующей
        информации, в результате чего вызывающая программа не знает, как ее
        обрабатывать.{" "}
      </div>
      <div className="item__text">
        3. Затирание кода другого процесса. Может произойти, если два процесса
        имеют доступ к одной и той же области памяти.
      </div>
      <div className="item__text">
        4. Не сохранены введенные данные. Программа запрашивает у пользователя
        данные и не сохраняет их. Причиной может быть недоступность файла, в
        котором должна была быть сохранена эта информация.
      </div>
      <div className="item__title">Ситуация гонок </div>
      <div className="item__text">
        Классическая ситуация гонок описывается так. Предположим, в системе
        ожидаются два события, А и Б. Первым может произойти любое из них. Но
        если первым произойдёт событие А, выполнение программы продол¬жится, а
        если первым наступит событие Б, то в работе программы произойдёт сбой.
        Программист полагал, что первым всегда должно быть событие А, и не
        ожидал, что Б может выиграть гонки. Тестировать ситуации гонок довольно
        сложно. Наиболее типичны они для систем, где параллельно выполняются
        взаимодействующие процессы и потоки, а также для многопользовательских
        систем реального времени. Ошибки в таких системах трудно воспроизвести,
        и на их выявление обычно требуется очень много времени.
      </div>
      <div className="item__text">
        1. Гонки при обновлении данных. Клиент банка получил $500 и потратил
        $100, до этого на его счете было $1000. Первая процедура считала с диска
        остаток в $1000 и вычла из него $100. До того, как она записала
        результат на диск, вторая процедура счи¬тала остаток и добавила к нему
        $500. Затем первая процедура записала свой результат, а вторая — свой. В
        результате вместо $1400 остаток получился равным $1500.{" "}
      </div>
      <div className="item__text">
        2. Предположение, что одно задание завершится до начала другого.
      </div>
      <div className="item__text">
        3. Сообщения приходят одновременно или не в том порядке, в котором они
        были отправлены.
      </div>
      <div className="item__title">Перегрузки</div>
      <div className="item__text">
        Программа может не справляться с повышенными нагрузками. Напри¬мер, она
        может не выдерживать интенсивной и длительной эксплуатации или не
        справляться со слишком большими объемами данных. Кроме того, сбои могут
        происходить из-за нехватки памяти или отсутствия других не-обходимых
        ресурсов. У каждой программы свои пределы. Вопрос в том, соответствуют
        ли реальные возможности и требования программы к ресурсам ее
        спецификации, и как программа себя поведет при перегрузках.
      </div>
      <div className="item__text">
        1. Требуемый ресурс недоступен (диск полон, стек полон, очередь печати
        заполнена, в принтере нет ленты, ...)
      </div>
      <div className="item__text">
        2. Потеря информации о нажатых клавишах из-за недостаточного размера
        буфера ввода или очереди.
      </div>
      <div className="item__title">Аппаратное обеспечение </div>
      <div className="item__text">
        Программы могут посылать устройствам неверные данные, игнорировать их
        сообщения об ошибках, пытаться использовать устройства, которые заняты
        или вообще отсутствуют. Даже если нужное устройство просто сло¬мано,
        программа должна понять это, а не сбоить при попытке к нему обратиться.
      </div>
      <div className="item__text">1. Неверный адрес устройства.</div>
      <div className="item__text">2. Устройство недоступно.</div>
      <div className="item__text">
        3. Данной программе или устройству доступ к устройству запрещен.
      </div>
      <div className="item__title">Контроль версий </div>
      <div className="item__text">
        Бывает, что старые ошибки вдруг всплывают снова из-за того, что
        про¬грамма скомпонована с устаревшей версией одной из подпрограмм.
        Поэтому версии всех составляющих проекта обязательно должны
        централизованно контролироваться. Кроме того, следует убедиться, что
        правильны все появляющиеся на экране сообщения об авторских правах,
        названии и номере версии программного продукта. Обязательной проверке
        подлежат десятки мелких деталей. Обычно контроль программы и ее
        исходного кода осуществляется группой контроля качества.
      </div>
      <div className="item__text">
        1. В программе появляются старые ошибки, ранее исправлявшиеся
        (программист скомпоновал старую версию одной программы с новыми версиями
        остальных).
      </div>
      <div className="item__text">
        2. Ошибка, исправленная в одном месте программы, может быть обнаружена в
        другом (Программист использовал один и тот же код в разных программных
        модулях. Изменив его в одном месте, программист мог забыть изменить его
        в остальных местах (копиях этого кода)).
      </div>
      <div className="item__text">
        3. Неверный номер версии программы в заголовке экрана.
      </div>
      <div className="item__text">
        4. Неверная информация об авторских правах.
      </div>
      <div className="item__title">Документация </div>
      <div className="item__text">
        Документация считается частью программного продукта. И если она плохо
        написана, пользователь может подумать, что и сама программа ненамного
        лучше.
      </div>
      <div className="item__title">Ошибки тестирования</div>
      <div className="item__text">
        Если программист допускает по полторы ошибки на каждую строку
        программного кода, то сколько их допускает тестировщик на каждый тест?
        Обнаружение ошибок, допущенных тестировщиками, — дело обычное. Конечно,
        если таких ошибок будет слишком много, вы быстро потеряете доверие
        остальных членов команды. Но нужно иметь в виду, что иногда ошибки
        тестировщика отражают проблемы пользовательского интерфейса: если
        программа заставляет пользователя делать ошибки, значит, с ней что- то
        не так. Конечно, многие ошибки тестирования вызваны просто невер¬ными
        тестовыми данными.
      </div>
      <div className="item__text">
        1. Пропущены ошибки в программе. После обнаружения пропущенной ошибки
        нужно усовершенствовать процедуру тестирования.
      </div>
      <div className="item__text">
        2. Не документирована проблема (тестировщика просили больше не
        документировать подобные проблемы).
      </div>
      <div className="item__text">
        3. Не выполнен запланированный тест (тестовые материалы и записи плохо
        организованы, тесты перепутаны).
      </div>
      <div className="item__text">
        4. Проигнорированы предложения программистов - программист знает, какие
        функции кодировались слишком быстро, какие тесты выявили больше важных
        ошибок и где в программе могут встречаться подобные ошибки.
      </div>
      <div className="item__text">
        5. Документирование ошибки, которой нет на самом деле. Может оказаться,
        что проблема связана с неправильными действиями тестировщика, его
        непониманием программы: “После залогинивания в системе в браузере IE, в
        браузере FireFox авторизационные данные не вводятся автоматически”.{" "}
      </div>
      <div className="item__text">
        6. Ошибка выявлена и забыта. После документирования ошибки нужно
        отслеживать ее исправление.
      </div>
      <div className="item__title">Домашнее задание </div>
      <div className="item__text">
        1. Протестировать предмет из урока, на выбор (кот, будильник). Нужен
        список проверок.
      </div>
      <div className="item__text">
        2. Протестировать страницу авторизации в электронной почте. Для этого,
        предварительно нужно создать тестовый аккаунт (можно использовать свой).
        Далее, опираясь на описание категорий ошибок в методичке, выписать в
        таблицу действия, которые можно совершить пытаясь войти в почту. Цель -
        придумать проверки, понимать какой ждем результат проверки.s
      </div>
    </div>
  );
}

export default First;
