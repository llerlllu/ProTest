import React from "react";

function Fifth() {
  return (
    <div className="item">
      <div className="item__text">
        Система отслеживания ошибок — прикладная программа, разработанная с
        целью помочь разработчикам программного обеспечения (программистам,
        тестировщикам и др.) учитывать и контролировать ошибки и неполадки,
        найденные в программах, пожелания пользователей, а также следить за
        процессом устранения этих ошибок и выполнения или невыполнения
        пожеланий.
      </div>
      <div className="item__text">
        Баг-трекер является хранилищем истории изменений в ПО. Каждый из членов
        команды разработки использует баг-трекер для своих целей:
      </div>
      <div className="item__subtext">
        ● Руководитель проекта следит за выполнением задач и количеством ошибок,
        решает, что и когда будет исправляться. Однако может часть своих
        обязанностей делегировать.
      </div>
      <div className="item__subtext">
        ● Аналитик – формулирует задачи: требования к задачам, описание
        сценариев использования функциональности.
      </div>
      <div className="item__subtext">
        ● Разработчик использует баг-трекер как список дел. Он реализует
        функциональность, описанную в назначенной на него задаче, или чинит
        ошибку, которую ему назначили.
      </div>
      <div className="item__subtext">
        ● Тестировщик проверяет реализованные разработчиком задачи, регистрирует
        дефекты, которые обнаружил в ПО или полученные от пользователей.
      </div>
      <div className="item__text">
        Баг-трекер отображает текущее состояние ПО. Как много разработчики
        реализовали, как много ошибок в системе есть, как много исправлено и
        сколько ещё нужно реализовать. В некоторых баг-трекерах есть подобие
        новостной ленты, в которой отражена вся работа команды, кто какие
        изменения сделал, какие новые ошибки нашлись, кто кому переназначил
        задачи и т.д.
      </div>
      <div className="item__text">
        Важной функцией баг-трекера является оповещение заинтересованных лиц в
        изменениях по задачам и ошибкам. Чтобы не бегать к разработчику и
        сообщать, что в ПО нашлась ошибка, мы просто ее записываем и, если есть
        такая необходимость, назначаем на разработчика. При следующем обновлении
        “списка дел” разработчик уже будет в курсе проблемы. Как только
        разработчик закончил реализацию функциональности по задаче или исправил
        ошибку, то он назначает ее тестировщику. Ошибка или задача назначенная
        тестировщику является оповещением, что их можно проверять.
      </div>

      <div className="item__title">Обязательные атрибуты ошибки в трекере.</div>
      <div className="item__text">
        Тип ошибка – говорит о том, что есть дефект в уже реализованной
        функциональности. Тип «Ошибка» не говорит, почему она произошло, хотя
        причин может быть много.
      </div>
      <div className="item__text">
        Заголовок ошибки - некое название ошибки.
      </div>
      <div className="item__text">
        Шаги воспроизведения - это второй по важности атрибут ошибки в
        баг-трекере. Если разработчик не понял точно, как воспроизвести ошибку
        по заголовку, то будет смотреть шаги воспроизведения.
      </div>
      <div className="item__text">
        Фактический результат - описание фактического результата, если это
        возможно, более подробно раскрывать заголовок ошибки. Следите за тем,
        чтобы смысл заголовка не отличался от фактического результата, а то
        получится ошибка в описании ошибки.
      </div>
      <div className="item__text">
        Ожидаемый результат - обязательный пункт в описании ошибки. Для него,
        как и для фактического результата, часто не бывает отдельного поля, и он
        следует за фактическим. Окружение - является важным атрибутом ошибки,
        если у разработчика на рабочей машине окружение отличается от тестового,
        то он может не воспроизвести ошибку “локально”.
      </div>
      <div className="item__text">
        Версия ПО - является якорем для ошибки. Сказав версию ПО разработчику,
        вы поможете определить направление поисков бага. Или сможете обрадовать
        его тем, что нашли ошибку в более ранней версии ПО, и она уже
        исправлена.
      </div>
      <div className="item__text">
        Серьезность и приоритет - Серьезность отражала влияние дефекта на
        работоспособность приложения. Приоритет отражал очередность выполнения
        задачи или устранения дефекта. Серьезность выставлял тестировщик, а
        приоритет - руководитель проекта. В настоящее время в баг-трекерах
        используется только одно поле, объединяющее в себе обе функции.
      </div>
      <div className="item__text">
        Поле “Назначен на” - на кого назначена в текущий момент задача.
      </div>

      <div className="item__title">Пример оформления ошибки</div>
      <div className="item__text">Тип: Ошибка</div>
      <div className="item__text">Серьезность: Значительная (Major)</div>
      <div className="item__text">{`Назначен на: <Руководитель проекта>`}</div>
      <div className="item__text">
        Заголовок: Диалог "Преобразовать данные" показывает сообщение об ошибке
        при нажатии кнопки "Преобразовать".
      </div>
      <div className="item__text">Версия: 1.12.22</div>
      <div className="item__text">Шаги:</div>
      <div className="item__subtext">
        1. Перейти к диалогу “Преобразователь данные”
      </div>
      <div className="item__subtext">2. Нажать кнопку “Преобразовать”</div>
      <div className="item__text">
        Результат: Появилась ошибка. В аттаче скриншот и лог ошибки.>
      </div>
      <div className="item__text">
        Ожидание: Появилось уведомление о необходимости выбрать файл.
      </div>

      <div className="item__title">Домашнее задание</div>
      <div className="item__text">
        На практике мы заведём и оформим несколько ошибок. Посмотрим, какие есть
        статусы ошибок и задач. Поменяем статусы ошибок и задач. И поговорим,
        для чего нужно поле “комментарий”. Рекомендую использовать баг-трекер
        JIRA. Если такой возможности нет, то пользуйтесь любым удобным способом.
      </div>
    </div>
  );
}

export default Fifth;
