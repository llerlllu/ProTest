import React from "react";

function Third() {
  return (
    <div className="item">
      <div className="item__text">
        Задачей тестирования является поиск ошибок в ПО. Поэтому, придумывая
        тесты нужно проанализировать все возможные варианты сбоя программы или
        её неправильного поведения. Если в программе может произойти
        определенная ошибка, нужно подумать, как её поймать.
      </div>

      <div className="item__title">Скопление дефектов</div>
      <div className="item__text">
        Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это
        может происходить потому, что определенная область кода особенно сложна
        и запутана, или потому, что внесение изменений производит «эффект
        домино». Это знание часто используется для оценки рисков при
        планировании тестов – тестировщики фокусируются на известных «проблемных
        зонах».
      </div>
      <div className="item__text">
        О том, где «кучкуются» дефекты, можно узнать ещё на ранних этапах, когда
        проводится статическое тестирование (например, code review и анализ кода
        при помощи специальных инструментах). Когда дойдёт дело до динамического
        тестирования, можно сфокусироваться на тех областях, где было обнаружено
        больше дефектов статическими методами.
      </div>
      <div className="item__text">
        Также полезно проводить анализ первопричин (root cause analysis), чтобы
        предотвратить повторное появление дефектов, обнаружить причины
        возникновения скоплений дефектов и спрогнозировать потенциальные
        скопления дефектов в будущем.
      </div>

      <div className="item__title">Парадокс пестицидов</div>
      <div className="item__text">
        Если повторять те же тесты снова и снова, в какой-то момент этот набор
        тестов перестанет выявлять новые дефекты. Эту аналогию ввел Борис Бейзер
        в 1983 г. Он привел пример обработки полей пестицидами. Поле
        обрабатывается неким пестицидом в первый раз, и значительная часть
        вредителей погибает, но некоторые все же выживают, потому что их
        организмы оказались устойчивы к действию яда. Если повторно обработать
        поле тем же пестицидом, то выжившие после первой обработки с большой
        вероятностью выживут и после второй. Повторное применение тех же тестов
        и тех же методик приводит к тому, что в продукте остаются именно те
        дефекты, против которых эти тесты и эти методики неэффективны.
      </div>
      <div className="item__text">
        Чтобы преодолеть «парадокс пестицидов», необходимо регулярно
        пересматривать существующие тест-кейсы и создавать новые, разнообразные
        тесты, которые будут выполняться на различных частях системы. Это
        позволит обнаружить больше дефектов.
      </div>

      <div className="item__title">Тест-кейс </div>
      <div className="item__text">
        Тест – это набор из одного или нескольких тестовых сценариев.
      </div>
      <div className="item__text">
        Тестовый сценарий – это набор входных значений, предусловий выполнения,
        ожидаемых результатов и постусловий выполнения, разработанный для
        определенной цели или тестового условия, таких как выполнения
        определенного пути программы или же для проверки соответствия
        определенному требованию.
      </div>
      <div className="item__text">
        Тест-кейс — это такое описание проверки работы системы, которое может
        выполнить любой человек из команды, будь то тестировщик, разработчик,
        аналитик или даже заказчик.
      </div>

      <div className="item__title">Стандартные атрибуты тест-кейса</div>
      <div className="item__text">
        Номер - уникальный идентификатор тест-кейса. Его удобно использовать для
        одинакового понимания, о какой проверке идет речь.
      </div>
      <div className="item__text">
        Название - краткое описание сути проверки. Кратко, но ёмко.
      </div>
      <div className="item__text">
        Предварительные условия - список действий, которые приводят систему к
        состоянию пригодному для проведения основной проверки. Либо список
        условий, выполнение которых говорит о том, что система находится в
        пригодном для проведения основного теста состояния.
      </div>
      <div className="item__text">
        Шаги тестовой ситуации - список действий, переводящих систему из одного
        состояния в другое, для получения результата, на основании которого
        можно сделать вывод об удовлетворении реализации, поставленным
        требованиям.
      </div>
      <div className="item__text">
        Ожидаемый результат - сама проверка: что мы ожидаем получить после
        выполнения шагов.
      </div>
      <div className="item__text">
        Постусловия - список действий, переводящих систему в первоначальное
        состояние.
      </div>
      <div className="item__text">
        Рассмотрим пример. Есть внутренний сайт компании, которая проводит
        интернет — www.test.ru.
      </div>
      <div className="item__text">
        Тестовый стенд, на котором проверяются доработки перед выкладкой в PROD
        находится по другому адресу — www.dev_test.ru.
      </div>
      <div className="item__text">
        Примечание: www.test.ru — абстрактное обозначение некоего сайта, не надо
        туда заходить и искать эту систему.
      </div>
      <div className="item__text">
        На сайте можно заводить карточки обслуживаемых зданий и карточки их
        жильцов. Карточки создает администратор, на тестовой машине всегда есть
        пользователь с правами админа, логин / пароль — admin / 1. При входе на
        тестовый сервер есть дополнительная авторизация, чтобы туда не могли
        попасть люди "извне", с логином и паролем test / test.
      </div>

      <div className="item__text">Тест-кейс № 1.Создание жильца без ФИО.</div>
      <div className="item__text">Предусловия:</div>
      <div className="item__text">
        Создать или проверить наличие пользователя с правами администратора,
        логин: admin и пароль: 1
      </div>
      <div className="item__text">Шаги:</div>
      <div className="item__subtext">
        1. Зайти на сайт www.dev_test.ru (логин - test, пароль - test).
      </div>
      <div className="item__subtext">
        2. Войти под учеткой администратора (логин - admin, пароль - 1)
      </div>
      <div className="item__subtext">3. Перейти на вкладку "Жильцы".</div>
      <div className="item__subtext">
        4. Нажать на кнопку "Создать карточку жильца".
      </div>
      <div className="item__subtext">
        5. Нажать на кнопку "Сохранить", не заполняя никакие данные
      </div>
      <div className="item__text">Ожидаемый результат:</div>
      <div className="item__text">
        Появляется сообщение об ошибке "Заполните обязательные поля, отмеченные
        *", карточка не сохраняется.
      </div>
      <div className="item__text">Постусловия:</div>
      <div className="item__text">
        Если пользователя с правами администратора создавали, то удалить его.
      </div>

      <div className="item__title">Чек-листы</div>
      <div className="item__text">
        Чек-лист – один из фундаментальных элементов тестирования ПО. Он состоит
        из набора тестов, по аналогии с тест-кейсами, но имеет ряд сильных
        отличий.
      </div>
      <div className="item__text">
        Чек-лист представляет собой простой список в котором коротко и ёмко
        перечислены проверки.
      </div>
      <div className="item__text">
        Например, представьте себе список покупок:
      </div>
      <div className="item__subtext">1. Молоко.</div>
      <div className="item__subtext">2. Килограмм свинины.</div>
      <div className="item__subtext">3. Хлеб.</div>

      <div className="item__title">Стандартные атрибуты чек-листа</div>
      <div className="item__text">
        Название - в названии отражается раздел или область в ПО, для которого
        сделаны проверке, например «Регистрация пользователя».
      </div>
      <div className="item__text">
        Наименование проверки - краткое описание сути проверки. Кратко, но емко.
        Ожидаемый результат - сама проверка: что мы ожидаем получить. В
        некоторых видах чек-листов он не используется.
      </div>
      <div className="item__text">
        Результат- результат проверки, прошла или нет.
      </div>

      <div className="item__title">Чит-листы</div>
      <div className="item__text">
        Зачастую нам нужно осуществлять однотипные проверки в разных местах:
        проверка ввода в текстовое поле, валидация поля e-mail, ограничения в
        числовых полях, SQL и XSS инъекции и т.д. Для этих случаев, чтобы не
        забыть «что нужно проверить», и создаются чит-листы (иногда их ещё
        называют cheat sheets)
      </div>

      <div className="item__title">Что дают чит-листы?</div>
      <div className="item__text">
        ● Используя чит-листы, вы освобождаете свой разум для более важных
        задач.
      </div>
      <div className="item__text">
        ● Задокументировав чит-листы, их можно обсудить с коллегами:
        разработчиками, руководителями проектов. Расширив чит-листы на основании
        их идей, вы сможете пропускать меньше ошибок.
      </div>
      <div className="item__text">
        ● Чит-листы можно подсматривать, чит-листами можно делиться. Вы можете
        найти стандартные чит-листы по XSS, SQL, или чит-листы от Элизабет
        Хендриксон и Джеймса Баха. Изучая чит-листы коллег, можно учиться!
      </div>
      <div className="item__text">
        ● Чит-листы создаются только один раз, после этого они лишь расширяются.
        А это значит, что когда у вас появится новый проект со схожим
        функционалом, или новое поле с аналогичными требованиями, вам не надо
        будет ломать голову «как его тестировать». У вас будет время чтобы
        подумать «как улучшить тестирование этого элемента?».
      </div>
      <div className="item__text">
        ● Создание чит-листов — отличное времяпрепровождение в команде
        тестировщиков. Их можно совместно их обсуждать, прорабатывать. В диалоге
        мы учимся, выслушивая идеи друг друга, а в результате получаем
        продуманное покрытие и хорошие результаты.
      </div>

      <div className="item__title">Домашнее задание</div>
      <div className="item__text">
        1. Написать по 3-5 тест-кейсов (позитивных и негативных) на следующие
        функции в электронной почте, используя временный почтовый адрес или хинт
        с gmail почтой:
      </div>
      <div className="item__subtext">a. Отправка письма;</div>
      <div className="item__subtext">b. Сохранение черновика.</div>
    </div>
  );
}

export default Third;
